{"version":3,"sources":["components/Header/index.js","components/Cat/index.js","components/CatBoard/index.js","components/Square/index.js","components/CatGrid/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","_this","this","react_default","a","createElement","className","href","type","data-toggle","data-target","id","onClick","props","onStartGame","React","Component","Cat","row","col","src","getSourceImg","alt","CatBoard","Cat_Cat","onCatClick","rowItems","Array","rows","i","colItems","cols","j","push","key","renderItem","Square","srcImage","CatGrid","cat","catRow","catCol","Square_Square","gridId","getGridId","tdClass","gridData","highlight","gridRows","gridCols","message","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","status","fill","gridIndex","won","map","Map","val","has","oldGridId","get","set","hasNextPosition","slice","hasWon","setState","_this2","statusClassName","Header_Header","CatBoard_CatBoard","handleCatClick","CatGrid_CatGrid","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88db135d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n\n  render() {\n\n    return (\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/\">Cat Game</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n            <div className=\"navbar-nav ml-auto\">\n              <button className=\"btn btn-link nav-item nav-link active\" onClick={() => this.props.onStartGame()}>Start New Game</button>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Cat extends React.Component {\n\n  getSourceImg() {\n    return 'assets/img/cat' + this.props.row + this.props.col + '.jpg';\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"btn w-100 h-100\" onClick={() => this.props.onClick()}>\n          <img src={this.getSourceImg()} alt=\"Cat\"></img>\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Cat from '../Cat';\n\nexport default class CatBoard extends React.Component {\n\n  renderItem(row, col) {\n    return (\n      <Cat row={row} col={col} onClick={() => this.props.onCatClick(row, col)} />\n    );\n  }\n\n  render() {\n\n    const rowItems = new Array(this.props.rows);\n    for (let i = 0; i < this.props.rows; i++) {\n\n      const colItems = new Array(this.props.cols);\n      for (let j = 0; j < this.props.cols; j++) {\n        colItems.push(<td key={i + ' ' + j}>{this.renderItem(i, j)}</td>);\n      }\n      rowItems.push(<tr key={i}>{colItems}</tr>);\n    }\n\n    return (\n      <table className=\"table table-borderless\">\n        <tbody>\n          {rowItems}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React from 'react';\nimport './index.css';\n\nexport default class Square extends React.Component {\n\n  render() {\n\n    const srcImage = this.props.srcImage;\n\n    if (srcImage) {\n      return (\n        <div>\n          <img className=\"gridImage\" src={srcImage} alt=\"Cat\"></img>\n        </div>\n      );\n    }\n\n    return (\n      <div></div>\n    );\n\n  }\n}\n","import React from 'react';\nimport Square from '../Square';\nimport './index.css';\n\nexport default class CatGrid extends React.Component {\n\n  getSourceImg(cat) {\n    return 'assets/img/cat' + cat.catRow + cat.catCol + '.jpg';\n  }\n\n  /**\n   * Convert 2d representation into linear\n   */\n  getGridId(row, col) {\n    return (this.props.cols * row) + col;\n  }\n\n  renderItem(cat) {\n    const srcImage = cat != null ? this.getSourceImg(cat) : null;\n    return (\n      <Square srcImage={srcImage} />\n    );\n  }\n\n  render() {\n    const rowItems = new Array(this.props.rows);\n    for (let i = 0; i < this.props.rows; i++) {\n\n      const colItems = new Array(this.props.cols);\n      for (let j = 0; j < this.props.cols; j++) {\n        const gridId = this.getGridId(i, j);\n        const highlight = this.props.gridData[gridId] != null ? this.props.gridData[gridId].highlight : false;\n        const tdClass = highlight ? \"grid highlight\" + i : \"grid\";\n        colItems.push(<td key={gridId} className={tdClass}>{this.renderItem(this.props.gridData[gridId])}</td>);\n      }\n      rowItems.push(<tr key={i}>{colItems}</tr>);\n    }\n\n    return (\n      <table className=\"table table-bordered text-center\">\n        <tbody>\n          {rowItems}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React from 'react';\nimport Header from '../Header';\nimport CatBoard from '../CatBoard';\nimport CatGrid from '../CatGrid';\n\nexport const boardRows = 3;\nexport const boardCols = 4;\nexport const gridRows = 4;\nexport const gridCols = 3;\nconst message = 'Click on the cat images to fill the grid. Fill unique cats in all rows to win the game.';\n\nexport default class Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: message,\n      gridData: Array(gridRows * gridCols).fill(null),\n      gridIndex: 0,\n    };\n  }\n\n  hasNextPosition() {\n    return this.state.gridIndex < gridRows * gridCols;\n  }\n\n  hasWon(gridData) {\n    let won = true;\n    for (let i = 0; i < gridRows; i++) {\n\n      const map = new Map();\n      for (let j = 0; j < gridCols; j++) {\n        const gridId = i * gridCols + j;\n        const val = gridData[gridId].catRow + ' ' + gridData[gridId].catCol;\n        if (map.has(val)) {\n          const oldGridId = map.get(val);\n          gridData[gridId].highlight = true;\n          gridData[oldGridId].highlight = true;\n          won = false;\n        } else {\n          map.set(val, gridId);\n        }\n      }\n    }\n    return won;\n  }\n\n  handleCatClick(catRow, catCol) {\n\n    let status = 'Clicked ' + catRow + ' ' + catCol;\n\n    if (!this.hasNextPosition()) {\n      return;\n    }\n\n    const gridData = this.state.gridData.slice();\n    const gridIndex = this.state.gridIndex;\n    gridData[gridIndex] = { catRow: catRow, catCol: catCol };\n    if (gridIndex + 1 === gridRows * gridCols) {\n      if (this.hasWon(gridData)) {\n        status = 'YOU WIN';\n      } else {\n        status = 'YOU LOSE';\n      }\n    }\n\n    this.setState({\n      status: status,\n      gridData: gridData,\n      gridIndex: gridIndex + 1,\n    });\n  }\n\n  onStartGame() {\n\n    this.setState({\n      status: message,\n      gridData: Array(gridRows * gridCols).fill(null),\n      gridIndex: 0,\n    });\n  }\n\n  render() {\n\n    let statusClassName = 'alert-info';\n    if (this.state.status === 'YOU WIN') {\n      statusClassName = 'alert-success';\n    } else if (this.state.status === 'YOU LOSE') {\n      statusClassName = 'alert-danger';\n    }\n\n    return (\n      <div>\n        <Header onStartGame={() => this.onStartGame()} />\n        <div className=\"container mt-3 mb-5\">\n          <div className={'text-center alert ' + statusClassName}>{this.state.status}</div>\n          <div className=\"row justify-content-between\">\n            <div className=\"col-lg-5\">\n              <CatBoard rows={boardRows} cols={boardCols} onCatClick={(catRow, catCol) => this.handleCatClick(catRow, catCol)} />\n            </div>\n            <div className=\"col-lg-5\">\n              <CatGrid rows={gridRows} cols={gridCols} gridData={this.state.gridData} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}